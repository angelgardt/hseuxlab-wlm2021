[["типы-данных.html", "2 Типы данных 2.1 Numeric 2.2 Logical 2.3 Character 2.4 Coercion", " 2 Типы данных Итак, до какого-то момента мы работали только с числами, а затем начали их сравнивать, и получили что-то новое типа TRUE и FALSE. И как мы отметили, это новый тип данных. А что такое вообще тип данных? Тип данных это характеристика данных, которая определяет: множество допустимых значений, которые могут принимать данные этого типа, и набор операций, которые можно осуществлять с данными этого типа. Что это значит, будем разбираться на конкретных примерах. 2.1 Numeric Этот тип данных нам уже знаком — это числа. Например, если мы создадим переменную со значением 7 и захотим узнать её тип, то это будет выглядеть так: a &lt;- 7 class(a) # эта команда выводит тип данных ## [1] &quot;numeric&quot; Итак, действительно, \\(7\\) — это число, нас не обманули. Вообще-то, в R много типов числовых данных: integer (целые числа), double (числа с десятичной дробной частью), complex (комплексные числа). Последние вам вряд ли встретятся в ближайшее время, а по поводу деления первых можно особо не заморачиваться — R сам разберется, что к чему, и переконвертирует как надо. Однако для интересующихся есть спойлер — все дело в том, как храняться числа на железе. А о комплексных числах в R немного можно почитать тут. Если мы всё же хотим выяснить, что это за числовые данные, то воспользуется функцией typeof(): typeof(a) ## [1] &quot;double&quot; На числовых данных выполняются все математические операции и различные функции, с чем мы развлекались на протяжении предыдущей главы. А множество значений этого типа, как вы понимаете, бесконечно. 2.2 Logical Здесь все гораздо проще. Есть всего два значение TRUE и FALSE, то есть «истина» и «ложь». Получаются логические данные в результате сравнения — и мы это уже тоже видели в предыдущей главе — и на себе допускают тоже только сравнение. TRUE == TRUE # но вообще-то это операция, которая не несет никакого смысла ## [1] TRUE FALSE != FALSE # эта тоже не несет ## [1] FALSE FALSE == TRUE # и эта ## [1] FALSE TRUE и FALSE — это логические константы, и, обратите внимание, записываются они прописными буквами. true и True не сработают. Правда есть вариант записывать их только одной буквой T и F, но c’est mauvais ton, и вот почему: T == TRUE ## [1] TRUE T &lt;- FALSE T == TRUE ## [1] FALSE Константы TRUE и FALSE защищены от перезаписи (на то они и константы): Попробуйте выполнить TRUE &lt;- FALSE Поэтому мы не будем жалеть времени и символы и в угоду удобочитаемости и стабильности кода будем писать логические константы полностью. Хотя множество значение логического типа данных действительно состоит из двух элементов TRUE и FALSE, логических констант в R — три штуки. Какая третья? 2.3 Character Очевидно, что в практике мы не всегда имеет дело только с цифрами, мы храним ещё и текстовую информацию. Для этого есть тип данных character (хотя другие языки программирования с R бы поспорили). x &lt;- &quot;Доброе утро, девочки!&quot; class(x) ## [1] &quot;character&quot; character — это строки (string) символов, поэтому они должны быть закавычены одинарными (') или двойными (\") кавычками. Так R поймёт, где строка начинается и где заканчивается. Большой разницы между одинарными и двойными кавычками нет, но если у вас кавычки внутри кавычек, здесь надо быть аккуратным: x &lt;- &#39;Мужчина громко зашёл в комнату и высказал решительное &quot;здравствуйте&quot;&#39; x ## [1] &quot;Мужчина громко зашёл в комнату и высказал решительное \\&quot;здравствуйте\\&quot;&quot; А вообще, есть беспроигрышный вариант: x &lt;- &#39;Мужчина громко зашёл в комнату и высказал решительное «здравствуйте»&#39; x ## [1] &quot;Мужчина громко зашёл в комнату и высказал решительное «здравствуйте»&quot; 2.4 Coercion "]]
