[
["знакомство-с-r-и-rstudio.html", "1 Знакомство с R и RStudio 1.1 Что это и откуда? 1.2 Почему R? 1.3 Установка R и RStudio 1.4 Где спросить вопрос или искать ответ? 1.5 Интерфейс R 1.6 Интерфейс RStudio 1.7 R как калькулятор 1.8 Assignment и переменные", " 1 Знакомство с R и RStudio — Я вот не могу выбрать: делать на R или на Python? — Да какая разница! Главное — делай! 1.1 Что это и откуда? R — популярный язык программирования среди исследователей в социальных и гуманитарных науках. Если совсем коротко, то начиналось всё с языка S, который был языком программирования для статистического анализа. Потом его доработали и получился R. Хотя сегодня всё ещё можно услышать, что «R — это язык программирования для статистической обработки данных», это ложь. Да, когда-то давно дела обстояли именно так, но сейчас R — это полноценный язык программирования, который позволяет решать широкий спект задач от статистического анализа и data wrangling до машинного обучения, моделирования и создания сайтов и приложений. 1.2 Почему R? свободное ПО (часть GNU Project) динамично развивается громадные возможности расширения функционала более 10 000 пакетов открытый исходный код возможность написать свои Source большое сообщество по всему миру, много ресурсов для задавания вопросов Linear Warriors vs Quadratic Wizards в SPSS (и другие GUI пакеты) ниже порог вхождения, но развитие навыков — линейное в R порог вхождения выше, но впоследствии случается резкий буст, и вы становитесь богами дата саенс Source репродуцируемость результатов 1.2.1 А он лучше Питона? Source Нет. Но он и не хуже. Вообще файт R vs Python, на мой взгляд, несколько бессмысленный, поскольку, по факту, всё упирается в синтаксис языка. Ну, и запрос работодателя, конечно. Возможности обоих языков и скорость работы сопоставимы. Области применения по большей части тоже. Поэтому я пользуюсь следующей эвристикой: аналитика, статистика, графики, покрутить данные — R машинное обучение, нейросети, другой ИИ, интерфейсы и [собственно] программирование — Python Многие, наверняка, оспорят такое разделение — я же не стану отстаивать его истинность. Мы будем работать на R, поскольку он всё же более популярен в наших кругах — среди «социально-гуманитарных аналитиков». 1.3 Установка R и RStudio Чтобы нам радостно и приятно жилось, нужно установить: Сначала R на Windows на Mac на Linux Затем RStudio Если что-то не установилось или вы предпочитаете облачные сервисы, то можно работать через браузер в RStudio Cloud. 1.3.1 А зачем обе штуки ставить? Вопрос не безосновательный. Не углубляясь в мелкие детали, скажем так: R — это собственно язык программирования, а RStudio — это среда (IDE, integrated development environment), которая позволяет в этом языке удобно и просто работать, а также расширяет его возможности. RStudio — не единственная среда для работы в R, но, определённо, самая топовая. Почти все пользуются именно ею, и нет смысла искать что-то более удобное. 1.4 Где спросить вопрос или искать ответ? Google — препарат выбора Stack Overflow — ответы на вопросы, и не только по R Stack Overflow на русском — то же самое, только отечественные специалисты Cookbook for R — хорошая книжка для старта RStudio Community — ответы на вопросы по R R-bloggers — про новинки в R и рядом с ним Хабр про R … 1.5 Интерфейс R Можно, конечно, работать и без RStudio вовсе — чисто в R. Мы кратенько взглянем на его интерфейс, чтобы наслаждение от встречи с IDE-шкой было больше. КАРТИНКА Выглядит весьма по-программистски. Есть окно скрипта, где пишутся команды, есть консоль, в которой они выполняются, иногда открываются окна с графиками. Но, в общем, посмотрели для общего развития — и хватит. Пора серьезными делами заняться. 1.6 Интерфейс RStudio Итак, посмотрим на RStudio. При запуске у вас откроется что-то такое: КАРТИНКА Видно четыре (или три1) окна. Давайте последовательно разбираться, что в каждом из них происходит. 1.6.1 Console В консоль можно писать команды и запускать их нажатием Enter. Они будут сразу выполняться. После некоторых команд будет выводиться какой-то результат. С помощью стрелок ↑ и ↓ можно вывести предыдущие команды, например, чтобы запустить их ещё раз, не вводя повторно, или каким-либо образом их изменить. Можно, в прицнипе, работать только из консоли, но на практике это не очень удобно. Главным образом, из-за того, что команды улетают «вникуда» и к некоторым уже будет нельзя вернуться. Поэтому существует редактор кода. 1.6.2 Code Editor По своей сути это обычный блокнот с той лишь разницей, что здесь некоторые слова раскрашены. И в этом блокноте мы пишем текст программы (скрипт), который состоит из комманд. Чтобы выполнить команду, нам необхожимо отправить её в консоль с помощью Ctrl + Enter (Cmd + Enter). Нажатие Enter здесь как и в обычном текстовом редакторе осуществляет переход на новую строку. Результат выполнения команды отображается в консоли, как будто вы изначально запускали команду там. В консоли удобно что-то быстро поститать, скрипт же удобнее при работе с длинными командами и для сохранения кода (текста) для дальнейшей работы. Чтобы сохранить скрипт, сделайте File → Save (as…) или нажмите Ctrl + S (Cmd + S). Несмотря на то, что файл сохраняется с расширением .R, это всё ещё обычный текст, который можно открыть и редактировать в любом текстовом редакторе (типа Notebook или TextEdit). К вопросу текста мы ещё вернёмся. 1.6.2.1 Кодировка Компьютер умеет хранить в памяти только цифры. А текст мы набираем буквами. Поэтому ему приходится перекодировать буквы в цифры. Делать это можно по-разному — поэтому существуют разные кодировки. При сохранении скрипта важно следить за кодировкой, особенно если в тексте встречаются кириллические знаки. В разных операционных систем разная кодировка по умолчанию, поэтому на другом компьютере файл может открываться с неведомой кракозяброй типа этой: КАРТИНКА Обычно при сохрании файла с кириллицей программа автоматически спрашивает, в какой кодировке его надо сохранить. Выбирайте UTF-8 — она корректно откроется в любой операционной системе. Также вы можете сохранить файл в определенной кодировке в помощью File → Save with Encoding…. Если при открытии файла у вас отображается кракозябра, подобная той, которая показана выше, нужно узнать кодировку файла2 (для Win это обычно ASCII, для Mac — UTF-8) и выполнить File → Reopen with Encoding…. 1.6.3 Environment (Workspace) и History Здесь, в Environment, можно наблюдать переменные и другие объекты, которые создаются в процессе работы кода, а также некоторую информацию о них. Это удобно, поскольку код, бывает, разрастается до сумасшедшего количества строк, и что вы там насоздавали тремястами строками выше — уже и не упомнить. А тут всё под рукой. В окне History можно найти историю команд, которые вы выполняли. Может быть полезно, чтобы не листать консоль, которая, как правило, завалена результатами и ошибками. 1.6.4 Plots, Files, Packages, Help, Viewer Очень полезное окно в кучей всего. сюда выводятся графики, которые вы строите здесь можно найти справку по функциям и пакетам проверить, какие у вас установлены пакеты и их версии посмотреть файлы в рабочей директории наблюдать 3D-визуализации, превью отчетов, презентаций и много чего ещё 1.7 R как калькулятор R — полноценный язык программирования с множеством возможностей, но давайте начнём с малого. Первое, от чего стоит избавиться — это страх консоли. Боязни калькулятора вроде не бывает (но это не точно3), поэтому стартанём с этого. 1.7.1 Арифметические операции В R есть все привычные нам математические операции и операторы для них: +, -, *, /, ^. Выполняются они тоже вполне предсказуемо: 2 + 5 # сложение ## [1] 7 10 - 4 # вычитание ## [1] 6 3 * 7 # умножение ## [1] 21 30 / 3 # деление ## [1] 10 2 ^ 10 # возведение в степень ## [1] 1024 Также есть два особых деления: 5 %/% 2 # целочисленное деление ## [1] 2 5 %% 2 # взятие остатка от деления (5 mod 2) ## [1] 1 Попробуйте самостоятельно посчитать какие-нибудь простые примеры. Source В R есть скобки — (). Их назначение такое же, как и в математике. Порядок выполнения арифметических действий (приоритетов операторов4, operator precedence) тоже как в математике. Итого имеем: 4 * 4 + 4 ## [1] 20 4 * (4 + 4) ## [1] 32 5 * 5 ^ 5 ## [1] 15625 (5 * 5) ^ 5 ## [1] 9765625 Так что используйте скобки, если вы не уверены, в каком порядке будут выполняться действия. Или смотрите таблицу приоритетор операторов по команде ?Syntax. 1.7.2 Функции Но что, если нам надо посчитать что-то более сложное? Например, извлечь корень или вычислить логарифм? С корнем мы можем провернуть математический финт, если вспомним, что \\(\\sqrt{x} = x^{\\frac{1}{2}}\\): 4 ^ 0.5 ## [1] 2 Однако с логарифмом так уже не прокатит. Для вычисления подобных штук существуют функции. К вопросу, что есть функция, мы ещё не раз вернемся, а пока ограничимся самым общим пониманием: функция это некоторая команда, которая имеет вид название_функции(), просит что-то указать у себя в скобках (например, число) и после выполнения возвращает нам некоторый ответ (например, снова число). На примере с квадратным корнем это выглядит так: sqrt(4) ## [1] 2 R чувствителен к регистру (case-sensitive), то есть SQRT(4) не сработает. А вот логарифм: log(16) ## [1] 2.772589 Вот только здесь есть одна важная деталь. Какая? Если мы вспомним определение логарифма, то окажется, что \\[\\log_a b = c \\Leftrightarrow a^c = b\\] &gt; Логарифм некоторого числа — это показатель степени, в которую нужно возвести основание, чтобы получить данное число. Здесь придется чуть углубиться в аргументы функции. Аргументы — это то самое «что-то», что мы записываем в скобках. Посчитайте в R значения следующих выражений: \\((\\log_3 65)^7\\) \\(e^\\sqrt[3]{5.5}\\) \\(\\sin(8\\pi + 4)\\) \\(\\log \\cos(-5\\sqrt{12})\\) \\(\\displaystyle 2\\tan \\log_{\\sqrt{3}}8 + \\sin^{(20\\! \\mod\\! 3)} \\Big(e + \\frac{8}{3}\\Big)\\) 1.8 Assignment и переменные При первом запуске может не быть окна Code Editor. Чтобы его открыть, сделайте File → New File → R Script или нажмите Ctrl + Shift + N (Cmd + Shift + N).↩ Чтобы не возникало лишних вопросов, лучше снабдить папку с файлами документом README.md, где описать все важные детали, в том числе и кодировку файла. Об это ещё немного поговорим поздее.↩ Бывает, что вот это распространяют и на калькуляторы тоже. [Кек]↩ А вообще в разных языках программирования этот вопрос решается по-разному.↩ "]
]
